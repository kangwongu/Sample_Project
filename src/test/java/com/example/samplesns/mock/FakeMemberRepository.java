package com.example.samplesns.mock;

import com.example.samplesns.member.domain.Member;
import com.example.samplesns.member.domain.MemberStatus;
import com.example.samplesns.member.exception.MemberException;
import com.example.samplesns.member.service.port.MemberRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeMemberRepository implements MemberRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Member> data = new ArrayList<>();


    @Override
    public Optional<Member> findByEmail(String email) {
        return data.stream().filter(d -> d.getEmail().equals(email)).findAny();
    }

    @Override
    public Member getByEmail(String email) {
        return data.stream()
                .filter(d -> d.getEmail().equals(email))
                .findAny()
                .orElseThrow(() -> new MemberException(com.example.samplesns.member.exception.status.MemberStatus.NOT_EXIST_MEMBER));
    }

    @Override
    public Member getById(long memberId) {
        return null;
    }

    @Override
    public Optional<Member> findById(long memberId) {
        return data.stream().filter(d -> d.getId().equals(memberId)).findAny();
    }

    @Override
    public Member save(Member member) {
        if (member.getId() == null || member.getId() == 0) {
            Member newMember = Member.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(member.getEmail())
                    .password(member.getPassword())
                    .nickname(member.getNickname())
                    .birthday(member.getBirthday())
                    .certificationCode(member.getCertificationCode())
                    .status(member.getStatus())
                    .build();
            data.add(newMember);
            return newMember;
        } else {
            data.removeIf(d -> Objects.equals(d.getId(), member.getId()));
            data.add(member);
            return member;
        }
    }

    @Override
    public Optional<Member> findByEmailAndStatus(String email, MemberStatus status) {
        return data.stream().filter(d -> d.getEmail().equals(email) && d.getStatus().equals(status)).findAny();
    }

    @Override
    public List<Member> findAllByIds(List<Long> memberIds) {
        return data.stream().filter(d -> memberIds.contains(d.getId())).collect(Collectors.toList());
    }
}
