package com.example.samplesns.mock;

import com.example.samplesns.post.domain.Post;
import com.example.samplesns.post.dto.DailyPostResponse;
import com.example.samplesns.post.exception.PostException;
import com.example.samplesns.post.exception.status.PostStatus;
import com.example.samplesns.post.service.port.PostRepository;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;
import org.springframework.data.domain.SliceImpl;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakePostRepository implements PostRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Post> data = new ArrayList<>();

    @Override
    public Post save(Post post) {
        if (post.getId() == null || post.getId() == 0) {
            Post newPost = Post.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .member(post.getMember())
                    .title(post.getTitle())
                    .contents(post.getContents())
                    .createDate(post.getCreateDate())
                    .modifyDate(post.getModifyDate())
                    .build();
            data.add(newPost);
            return newPost;
        } else {
            data.removeIf(d -> Objects.equals(d.getId(), post.getId()));
            data.add(post);
            return post;
        }
    }

    @Override
    public Post getById(long postId) {
        return data.stream().filter(d -> d.getId().equals(postId)).findAny()
                .orElseThrow(() -> new PostException(PostStatus.NOT_EXIST_POST));
    }

    @Override
    public Slice<DailyPostResponse> groupByCreateDate(long memberId, LocalDate firstDate, LocalDate lastDate, Pageable pageable) {
        return null;
    }

    @Override
    public Slice<Post> getMemberPosts(long memberId, Pageable pageable) {
        List<Post> posts = data.stream().filter(d -> d.getMember().getId().equals(memberId))
                .sorted((d1, d2) -> d2.getCreateDate().compareTo(d1.getCreateDate()))
                .collect(Collectors.toList());

        boolean hasNext = false;
        if (posts.size() > pageable.getPageSize()) {
            posts.remove(pageable.getPageSize());
            hasNext = true;
        }

        return new SliceImpl<>(posts, pageable, hasNext);
    }

//    @Override
//    public void saveAllByBulk(long memberId, List<Post> posts) {
//
//    }

}
